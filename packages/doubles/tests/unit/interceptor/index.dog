use (
  alias://expected
  {interceptor, field, fun, simulator} = ~
)

suite(__filename, proc()
  suite("interceptor()", proc()
    test("when called, an interceptor must be returned", proc()
      # (1) act
      const (
        value = [1, 2, 3]
        i = interceptor(value, length = field.returns(1))
        out1 = i.length
        out2 = i[2]
      )

      # (2) assessment
      expected(out1).equalTo(1)
      expected(out2).equalTo(value[2])
    end)
  end)

  suite("interceptor.module()", proc()
    const shortUuidModulePath = require.resolve("short-uuid")

    teardown(proc()
      interceptor.clear(shortUuidModulePath)
    end)

    test("when module found, this must be replaced by interceptor proxy", proc()
      # (1) arrange
      use("short-uuid")

      interceptor.module(
        shortUuidModulePath
        generate = fun.returns("Second - Rinc贸n Exquisito")
      )

      # (2) act
      const (
        uuid = require("short-uuid")
        out = uuid.generate()
      )

      # (3) assessment
      expected(out).equalTo("Second - Rinc贸n Exquisito")
    end)

    test("when module not found, this must be loaded and replaced by interceptor proxy", proc()
      # (1) arrange
      remove(shortUuidModulePath, require.cache)

      interceptor.module(
        shortUuidModulePath
        generate = fun.returns("Second - Rinc贸n Exquisito")
      )

      # (2) act
      const (
        uuid = require("short-uuid")
        out = uuid.generate()
      )

      # (3) assessment
      expected(out).equalTo("Second - Rinc贸n Exquisito")
    end)
  end)
end)
use (
  Interceptor
  ../simulator/createMembers
)

/**
 * Creates an interceptor for a given [object]
 * and the indicated [members].
 */
export fn interceptor(object: any, members: map) = createObjectInterceptor(
  object
  members
)

/**
 * Create an interceptor for a given [object]
 * and the indicated [members].
 *
 * @dev
 * This function returns a proxy for the object
 * monitoring and intercepting the indicated methods.
 */
fn createObjectInterceptor(object, members: map) = createInterceptorProxy(
  Interceptor(intercepted = object, members = createMembers(members))
  members
)

/**
 * Creates a proxy for a given interceptor.
 */
fn createInterceptorProxy(interceptor, members) = proxy(
  interceptor.intercepted

  # monitor a read access to a member.
  get = fn(_, member) -> result
    if interceptor.hasToIntercept(member) then
      result = interceptor.processGet(member)
    else
      result = interceptor.intercepted[member]
  end
)

/**
 * The current module interceptors.
 */
interceptor.modules = {}

/**
 * Creates an interceptor for a given module by its [path]
 * and the indicated [members].
 *
 * Returns the procedure for undoing the interception.
 */
interceptor.module = proc(path: text, members: map)
  # (1) load the module if needed
  const {cache} = require

  if path not in cache then
    require(path)
  
  # (3) create interceptor
  const (
    mod = cache[path]
    inter = Interceptor(intercepted = mod.exports, members = createMembers(members))
    interProxy = createInterceptorProxy(inter, members)
  )

  # (3) replace
  cache[path] = mod{*, exports = interProxy}
  interceptor.modules[path] = inter
end

/**
 * Removes the interceptor for the given module by its [path].
 */
interceptor.clear = proc(path: text)
  if inter ::= interceptor.modules[path] then
    require.cache[path].exports = inter.intercepted
    remove(path, interceptor.modules)
end

use (
  ../Double
  log/Log
)

/**
 * A monitor, that is, a proxy to save the accesses to other object.
 */
export struct Monitor: Double
  /**
   * The log to use for saving the accesses.
   */
  @inject
  pub const log: Log

  /**
   * The object under supervision.
   */
  pub const target

  /**
   * The members under supervision.
   */
  @inject
  pub const members: text[]

  /**
   * Checks whether a member is monitorable.
   *
   * @remarks
   * A member is considered monitorable if:
   *
   * - No member specified explicitly.
   * - The member is in the list of members
   */
  pub fn hasToBeMonitorized(name) = len(members) == 0 or name in members

  /**
   * Saves a call in the log.
   */
  pub fn saveCall(...args) -> self
    log.saveCall(...args)

  /**
   * Saves a field access in the log.
   */
  pub fn saveAccess(...args) -> self
    log.saveAccess(...args)
